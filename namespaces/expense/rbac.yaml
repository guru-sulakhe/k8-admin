#Make sure you created harish user in AWS IAM and create EKS describe policy
#Attach the EKS describe policy to harish. so that harish can connect to EKS Cluster
#Now we should create a role which will defines the what resources should user can access and what type of action permissions can be given 
#Binding(Assigning) role expense-pod-reader to respective user

#Creating role and resource access 
#A Role always sets permissions within a particular namespace; when you create a Role, you have to specify the namespace it belongs in.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: expense
  name: expense-pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group, it refers a group of resources
  resources: ["pods"] #name of the resource
  verbs: ["get", "watch", "list"] #what type of access for the resource
---
#Binding(Assigning) role expense-pod-reader to harish user
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "harish" to read pods in the "expense" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: expense-pod-reader
  namespace: expense
subjects:
# You can specify more than one "subject"
- kind: User
  name: harish # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: expense-pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
#Creating ClusterRole and defining permissions on cluster scoped resources
#You can use a ClusterRole to:
#define permissions on namespaced resources and be granted access within individual namespace(s)
#define permissions on namespaced resources and be granted access across all namespaces
#define permissions on cluster-scoped resources
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: expense-cluster-reader
rules:
- apiGroups: [""]
  #
  # at the HTTP level, the name of the resource for accessing Secret
  # objects is "secrets"
  resources: ["secrets","persistentvolumes","nodes"] #resource access
  verbs: ["get", "watch", "list"] #read permission
---
# clusterrole binding to user harish of AWS IAM
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: ClusterRoleBinding
metadata:
  name: expense-cluster-reader
subjects:
- kind: User
  name: harish #Your IAM USER
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: expense-cluster-reader
  apiGroup: rbac.authorization.k8s.io